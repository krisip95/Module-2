package edu.smg05;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class EngineeringTask12_1 { 
	public static void main(String[] args) {
		int[] list = {2, 3, -8, 5, 7, 1, 4};
		int sum = 8;
		System.out.println(hasPair_BruteForce(list, sum)); 
	}
	
	//1 method
	//BruteForce 0(n^2)
	public static boolean hasPair_BruteForce(int[] list, int sum) {  
		for( int i = 0; i < list.length; i++) { 
			for( int j = i + 1; j < list.length; j++) { 
				if( list[i] + list[j] == sum) { 
					return true;
				}
			}
		}
		return false;
	}
	
	//2 method
	//hasPair_BinarySearch 0(nlog(n))
	public static boolean hasPair_BinarySearch ( int[] list, int sum) {
		for( int i = 0; i < list.length; i++) {
			if( BinarySearch12.binarySearch (list, sum - list[i]) > 0) { 
				return true;
			}
		}
		return false;
	}
	
	//3 method
	//0(n)
	public static boolean hasPair_FromBothEnds( int[] list, int sum) {
		int lastIndex = list.length - 1; 
		int firstIndex = 0;
		while (lastIndex > firstIndex)  { 
			int currentsum = list[lastIndex] + list[firstIndex];
			if(currentsum > sum) {
				lastIndex--; //namalqvame desniq index
			} else if (currentsum < sum) {
				firstIndex++; //uveli4avame leviq index
			} else { //ako sa ravni currentSum i sum
				return true;
			}
		}
		return false;
		}
	
	//4 method
	//0(n)
	public static boolean hasPair_HashSet( int[] list, int sum) {
		Set<Integer> rests = new HashSet<Integer>();
		for( int i = 0; i < list.length; i++) { 
			if( rests.contains(list[i])) {
				return true; 
			}
			
			rests.add(sum - list[i]); 
		}
		return false;
	}
}

